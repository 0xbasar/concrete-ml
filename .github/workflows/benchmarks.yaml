name: Benchmarks
on:
  workflow_dispatch:

  schedule:
    # * is a special character in YAML so you have to quote this string
    # At 22:00 every day
    # Timezone is UTC, so Paris time is +2 during the summer and +1 during winter
    - cron: '0 22 * * *'

env:
  ACTION_RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

jobs:
  should-run-benchmarks:
    runs-on: ubuntu-20.04
    outputs:
      should-run: ${{ steps.should-run.outputs.value || 'false' }}
    steps:
      - name: Check Benchmarks should run
        id: should-run
        run: |
          if [[ "${{ secrets.BENCHMARKS_ENABLED }}" == "BENCHMARKS_PREFIX_ENABLED" ]]; then
            echo "::set-output name=value::true"
          else
            echo "::set-output name=value::false"
          fi

  run-benchmarks:
    needs: [should-run-benchmarks]
    if: ${{ needs.should-run-benchmarks.outputs.should-run == 'true' }}
    name: Run Benchmarks on EC2 and Publish Results to Progress Tracker
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - instance-id: 'BENCHMARKS_EC2_INTEL_INSTANCE_ID'
            machine-name: 'AWS (c5.2xlarge)'
            machine-vcpu: '8'
            machine-os: 'Ubuntu 20.04'
            benchmark-samples: '5'
            artifact-name: 'c5.2xlarge'
          - instance-id: 'BENCHMARKS_EC2_AMD_INSTANCE_ID'
            machine-name: 'AWS (c5a.2xlarge)'
            machine-vcpu: '8'
            machine-os: 'Ubuntu 20.04'
            benchmark-samples: '5'
            artifact-name: 'c5a.2xlarge'
    env:
      PIP_INDEX_URL: ${{ secrets.PIP_INDEX_URL }}
      PIP_EXTRA_INDEX_URL: ${{ secrets.PIP_EXTRA_INDEX_URL }}

    steps:
      - name: Add masks
        run: |
          echo "::add-mask::${{ secrets.INTERNAL_PYPI_URL }}"
          echo "::add-mask::${{ secrets.INTERNAL_REPO_URL }}"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@05b148adc31e091bafbaf404f745055d4d3bc9d2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.BENCHMARKS_AWS_REGION }}

      - name: Write SSH Key To A File
        env:
          SSH_KEY: ${{ secrets.BENCHMARKS_EC2_SSH_KEY }}
        run: |
          touch ~/ssh-key
          chmod 0600 ~/ssh-key
          echo "${SSH_KEY}" > ~/ssh-key && chmod 0400 ~/ssh-key

      - name: Set Instance ID in env
        env:
          INSTANCE_ID: ${{ secrets[matrix.instance-id] }}
        run: |
          echo "INSTANCE_ID=${INSTANCE_ID}" >> "$GITHUB_ENV"

      - name: Start EC2 Instance
        run: |
          aws ec2 start-instances --instance-ids "${INSTANCE_ID}"

      # Export INSTANCE_ID so that's it's available in bash -c sub shell
      - name: Wait For The EC2 Instance To Get An IP Address
        run: |
          export INSTANCE_ID="${INSTANCE_ID}"
          # shellcheck disable=SC2016,2026
          timeout 180 bash -c 'until [[ $(aws ec2 describe-instances --instance-ids "${INSTANCE_ID}" --query "Reservations[].Instances[].PublicIpAddress" --output text) != "" ]]; do sleep 1; done'

      - name: Get Public IP Address of EC2 Instance
        id: public-ip
        run: |
          PUBLIC_IP="$(aws ec2 describe-instances --region eu-west-3 --instance-ids "${INSTANCE_ID}" --query "Reservations[].Instances[].PublicIpAddress" --output text)"
          echo "::add-mask::${PUBLIC_IP}"
          echo "::set-output name=value::${PUBLIC_IP}"

      - name: Wait For The EC2 Instance To Accept SSH Connections
        run: timeout 180 bash -c 'until nc -z ${{ steps.public-ip.outputs.value }} 22; do sleep 1; done'

      - name: Connect To EC2 Instance, Perform Benchmarks, Publish Results
        uses: appleboy/ssh-action@1d1b21ca96111b1eb4c03c21c14ebb971d2200f6
        with:
          host: ${{ steps.public-ip.outputs.value }}
          username: ${{ secrets.BENCHMARKS_EC2_USERNAME }}
          key: ${{ secrets.BENCHMARKS_EC2_SSH_KEY }}
          command_timeout: 720m
          script: |
            cd ~/project
            git clean -dfx
            git remote update
            echo "Resetting to ${{ github.sha }}"
            git reset --hard ${{ github.sha }}
            echo "Current rev:"
            git rev-parse HEAD

            rm -rf .env
            touch .env
            chmod 0600 .env
            echo 'export PIP_INDEX_URL="${{ env.PIP_INDEX_URL }}"' >> .env
            echo 'export PIP_EXTRA_INDEX_URL="${{ env.PIP_EXTRA_INDEX_URL }}"' >> .env
            echo 'export PROGRESS_SAMPLES="${{ matrix.benchmark-samples }}"' >> .env
            echo 'export PROGRESS_MACHINE_NAME="${{ matrix.machine-name }}"' >> .env
            echo 'export PROGRESS_MACHINE_VCPU="${{ matrix.machine-vcpu }}"' >> .env
            echo 'export PROGRESS_MACHINE_OS="${{ matrix.machine-os }}"' >> .env
            echo 'export ML_PROGRESS_TRACKER_URL="${{ secrets.ML_PROGRESS_TRACKER_URL }}"' >> .env
            echo 'export ML_PROGRESS_TRACKER_TOKEN="${{ secrets.ML_PROGRESS_TRACKER_TOKEN }}"' >> .env

            make docker_publish_measurements
            rm -rf .env
            docker system prune -f

      - name: Copy EC2 Instance ML Logs
        run: scp -o StrictHostKeyChecking=no -i ~/ssh-key ${{ secrets.BENCHMARKS_EC2_USERNAME }}@${{ steps.public-ip.outputs.value }}:project/logs/latest.ml.log latest.ml.log

      - name: Stop EC2 Instance
        if: ${{ always() }}
        run: |
          aws ec2 stop-instances --instance-ids "${INSTANCE_ID}"

      - name: Upload Logs of EC2 Instance
        uses: actions/upload-artifact@82c141cc518b40d92cc801eee768e7aafc9c2fa2
        with:
          name: ${{ matrix.artifact-name }}
          path: latest.*.log

      - name: Send Slack Notification
        if: ${{ always() }}
        continue-on-error: true
        uses: rtCamp/action-slack-notify@12e36fc18b0689399306c2e0b3e0f2978b7f1ee7
        env:
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
          SLACK_ICON: https://pbs.twimg.com/profile_images/1274014582265298945/OjBKP9kn_400x400.png
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: "Publishing benchmarks finished with status ${{ job.status }} \
            (${{ env.ACTION_RUN_URL }})"
          SLACK_USERNAME: ${{ secrets.BOT_USERNAME }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
